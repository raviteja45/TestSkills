class LRUCache {
	
	 private Node head = new Node();
	 private Node tail = new Node();
	 private Map<Integer,Node> map;
	
	LRUCache(){
        map = new HashMap<>(2);
		head.next = tail;
		tail.prev = head;
	}

	public void remove(Node n) {
		Node next = n.next;
		Node prev = n.prev;
		next.prev = prev;
		prev.next = next;
		
	}
	
	public void add(Node n) {
		Node headNext = head.next;
		n.next = headNext;
		headNext.prev = n;
		head.next = n;
		n.prev = head;
	}
	
	public int get(int key) {
		Node n = map.get(key);
		int result = -1;
		if(n!=null) {
			remove(n);
			add(n);
			result = n.val;
		}
		return result;
	}
	
	public void put(int key, int val) {
		Node n = map.get(key);
		if(n!=null) {
			remove(n);
			n.val = val;
			add(n);
		}else {
			if(map.size()==2) {
				map.remove(tail.prev.key);
				remove(tail.prev);
				
			}
			Node n1 = new Node();
			n1.val = val;
			n1.key = key;
			map.put(key, n1);
			add(n1);
		}
		
		
	}
	
	class Node {
		
		public Node next;
		
		public Node prev;
		
		public int val;
		
		public int key;

	}
	
	public static void main(String[] args) {
		LRUCache lRUCache = new LRUCache();
		lRUCache.put(1, 1); // cache is {1=1}
		lRUCache.put(2, 2); // cache is {1=1, 2=2}
		lRUCache.get(1);    // return 1
		lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
		lRUCache.get(2);    // returns -1 (not found)
		lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
		lRUCache.get(1);    // return -1 (not found)
		lRUCache.get(3);    // return 3
		lRUCache.get(4);    // return 4
	}

}
