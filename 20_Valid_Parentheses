class Solution {
    public boolean isValid(String s) {
        Map<String,String> map = new HashMap<>();
        map.put(")","(");
        map.put("}","{");
	    map.put("]","[");
        Stack<Character> stack = new Stack<>();
        for(int i=0;i<s.length();i++){
            String x = String.valueOf(s.charAt(i));
            if(map.containsKey(x)&&!stack.isEmpty()){
                char temp = stack.pop();
                if(!map.get(x).equals(String.valueOf(temp))){
                    return false;
                }
            }else{
                stack.add(s.charAt(i));
            }
        }
        if(!stack.isEmpty()){
            return false;
        }
        return true;
    }
}


/**
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true
*/
